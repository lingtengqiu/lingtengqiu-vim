########### header and bottom
snippet code "coding:utf-8"
# coding: utf-8
endsnippet

snippet main "if main"
if __name__ == '__main__':
    ${1}
endsnippet

########### import
snippet im "import"
import ${1}
endsnippet

snippet imp "import"
import ${1:module}
${2}
endsnippet

snippet fim "from . import ."
from ${1} import ${2}
endsnippet


snippet from "from . import ."
from ${1} import ${2}
endsnippet

########### single char
snippet t "True"
True${1}
endsnippet

snippet f "False"
False${1}
endsnippet

snippet n "None"
None${1}
endsnippet

snippet r "return"
return ${1}
endsnippet

snippet s "self."
self.${1}
endsnippet

snippet p "print"
print(${1})
endsnippet

snippet pr "print "
print(${1})
endsnippet

snippet pri "print ''"
print(${1})
endsnippet

snippet prt "print trace"
print(TRACK ================= ${1}, ${2})
endsnippet

snippet rep "repr"
repr(${1})
endsnippet

snippet repr "repr"
repr(${1})
endsnippet

snippet _ "__func__"
__${1:init}__${2}
endsnippet

snippet # "# xxxx"
# ${1}
endsnippet

snippet a "assert"
assert ${1}
endsnippet

snippet isi "isinstance"
isinstance(${1}, ${2})
endsnippet

############# 逻辑控制
snippet el "else"
else:
    ${0:# TODO}
endsnippet

snippet ei "elif"
elif ${1}:
    ${2}
endsnippet

snippet while "while"
while ${1:expression}:
    ${0:# TODO}
endsnippet

#############

snippet defs "defs"
def ${1:fname}(self, ${2:**kwargs}):
    """${3:docstring for $1}"""
    ${3:pass}
endsnippet



snippet pro "property"
def ${1}():
    doc = "${2: The $1 property.}"
    def fget(self):
        ${3:return self._$1}
    def fset(self, value):
        ${4:self._$1 = value}
    def fdel(self):
        ${5:del self._$1}
    return locals()
$1 = property(**$1())
endsnippet

snippet init "init"
def __init__(self, ${1:args}):
    ${2}
endsnippet


snippet rai "raise"
raise ${1}
endsnippet

snippet tr "traceback"
import traceback; traceback.print_exc()
endsnippet
#############

snippet fin "[i for i in l]"
[${1:item} for ${2:$1} in ${3}]
endsnippet

snippet finif "[i for i in l if i]"
[${1:item} for ${2:$1} in ${3} if ${4:$1}]
endsnippet

snippet td "TODO:"
TODO: ${1}
endsnippet

snippet dk "api doc"
    :url: ${1}
    :method: POST GET
    :params:

        None

    :return:(json/jsonp)

        code:
        code:
        code:

endsnippet

global !p
NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5
JEDI    = 0x6
SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'
class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		name_and_type = arg.split('=')[0].split(':')
		self.name = name_and_type[0].strip()
		self.type = name_and_type[1].strip() if len(name_and_type) == 2 else None
	def __str__(self):
		return self.name
	def __unicode__(self):
		return self.name
	def is_kwarg(self):
		return '=' in self.arg
	def is_vararg(self):
		return '*' in self.name
def get_args(arglist):
	args = []
	n = len(arglist)
	i = 0
	while i < n:
		l_bracket = 0
		start = i
		while i < n and (l_bracket > 0 or arglist[i] != ','):
			if arglist[i] == '[':
				l_bracket += 1
			elif arglist[i] == ']' and l_bracket > 0:
				l_bracket -= 1
			i += 1
		arg = arglist[start:i]
		if arg:
			args.append(Arg(arg))
		i += 1
	args = [arg for arg in args if arg.name != 'self']
	return args
def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES
def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3
def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: …
		_, col = vim.current.window.cursor
		line = vim.current.line
		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c
def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")
	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	elif  style == "google": return GOOGLE
	elif  style == "numpy": return NUMPY
	elif  style == "jedi": return JEDI
	else: return NORMAL
def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s TODO" % arg
	elif style == SPHINX:
		return "param %s: TODO" % arg
	elif style == NORMAL:
		return "@%s: TODO" % arg
	elif style == GOOGLE:
		return "s (%s): TODO" % (arg, arg.type or "TODO")
	elif style == JEDI:
		return "type %s: TODO" % arg
	elif style == NUMPY:
		return "%s : TODO" % arg
def format_return(style):
	if style == DOXYGEN:
		return "@return: TODO"
	elif style in (NORMAL, SPHINX, JEDI):
		return "Returns: TODO"
	elif style == GOOGLE:
		return "Returns: \nTODO"
def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(triple_quotes(snip))
		return
	snip.rv += '\n' + snip.mkline('', indent='')
	style = get_style(snip)
	if style == GOOGLE:
		write_google_docstring_args(args, snip)
	elif style == NUMPY:
		write_numpy_docstring_args(args, snip)
	else:
		for arg in args:
			snip += format_arg(arg, style)
def write_google_docstring_args(args, snip):
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]
	if args:
		snip += "Args:"
		snip.shift()
		for arg in args:
			snip += format_arg(arg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')
	if kwargs:
		snip += "Kwargs:"
		snip.shift()
		for kwarg in kwargs:
			snip += format_arg(kwarg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')
def write_numpy_docstring_args(args, snip):
	if args:
		snip += "Parameters"
		snip += "----------"
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]
	if args:
		for arg in args:
			snip += format_arg(arg, NUMPY)
	if kwargs:
		for kwarg in kwargs:
			snip += format_arg(kwarg, NUMPY) + ', optional'
	snip.rv += '\n' + snip.mkline('', indent='')
def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']
	for p in parents:
		snip += p + ".__init__(self)"
	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')
	for arg in filter(lambda arg: not arg.is_vararg(), args):
		snip += "self._%s = %s" % (arg, arg)
def write_slots_args(args, snip):
	quote = get_quoting_style(snip)
	arg_format = quote + '_%s' + quote
	args = [arg_format % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)
def write_function_docstring(t, snip):
	"""
	Writes a function docstring with the current style.
	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1
	args = get_args(t[2])
	if args:
		write_docstring_args(args, snip)
	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	if style == NUMPY:
		snip += 'Returns'
		snip += '-------'
		snip += 'TODO'
	else:
		snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
def get_dir_and_file_name(snip):
	return os.getcwd().split(os.sep)[-1] + '.' + snip.basename

def get_file_name(snip):
	return snip.basename 
endglobal


snippet def "function with docstrings" b
def ${1:function}(${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:Docstring for $1.}`!p
write_function_docstring(t, snip)`
	${5:${VISUAL:pass}}
endsnippet

snippet doc "docstring"
"""
@File: `!p snip.rv = get_file_name(snip)`.${1}
@Author: Lingteng Qiu
@Email: qiulingteng@link.cuhk.edu.cn
@Date: `date "+%Y-%m-%d"` 
@Desc: ${2}
"""
endsnippet

snippet parse "parse function"
def get_parse():
	parser = argparse.ArgumentParser(description='${1}')
	parser.add_argument('--mode', default='train', help='train or test', choices=['train', 'test', 'profile'])
	parser.add_argument('--device', default='cuda', help='select model')
	parser.add_argument('${2}', default='${3}', help='${4}')


	args = parser.parse_args()
	return args
endsnippet
snippet pars "parse function"
def get_parse():
	parser = argparse.ArgumentParser(description='${1}')
	parser.add_argument('--mode', default='train', help='train or test', choices=['train', 'test', 'profile'])
	parser.add_argument('--device', default='cuda', help='select model')
	parser.add_argument('${2}', default='${3}', help='${4}')


	args = parser.parse_args()
	return args
endsnippet
snippet par "parse function"
def get_parse():
	parser = argparse.ArgumentParser(description='${1}')
	parser.add_argument('--mode', default='train', help='train or test', choices=['train', 'test', 'profile'])
	parser.add_argument('--device', default='cuda', help='select model')
	parser.add_argument('--${2}', default='${3}', help='${4}')


	args = parser.parse_args()
	return args
endsnippet

snippet addp "add parse fuction"
parser.add_argument('--${1}', default='${2}', help='$3')
endsnippet
